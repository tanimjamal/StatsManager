
import java.awt.event.KeyEvent;
import java.util.*;
import javax.swing.*;
import java.io.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Tanim
 */
public class newPlayer extends javax.swing.JFrame {
   Player[] list = new Player[30];
    /**
     * Creates new form newPlayer
     */
    public newPlayer() {
        initComponents();
    }
    public newPlayer(Player[] pl){
        initComponents();
        list = pl;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GRU = new javax.swing.JLabel();
        BBallTeam = new javax.swing.JLabel();
        FName = new javax.swing.JLabel();
        LName = new javax.swing.JLabel();
        GmsPlayed = new javax.swing.JLabel();
        POsition = new javax.swing.JLabel();
        fname = new javax.swing.JTextField();
        lname = new javax.swing.JTextField();
        gamesPlayed = new javax.swing.JTextField();
        Rebounds = new javax.swing.JLabel();
        Assists = new javax.swing.JLabel();
        Number = new javax.swing.JLabel();
        Points = new javax.swing.JLabel();
        rebounds = new javax.swing.JTextField();
        assists = new javax.swing.JTextField();
        number = new javax.swing.JTextField();
        points = new javax.swing.JTextField();
        createPlayer = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        pos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 400));
        setResizable(false);
        setSize(new java.awt.Dimension(700, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GRU.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        GRU.setForeground(new java.awt.Color(255, 255, 255));
        GRU.setText("Grand Ridge University  ");
        getContentPane().add(GRU, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        BBallTeam.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        BBallTeam.setForeground(new java.awt.Color(255, 255, 255));
        BBallTeam.setText("Basketball Team");
        getContentPane().add(BBallTeam, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, -1, -1));

        FName.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        FName.setForeground(new java.awt.Color(255, 255, 255));
        FName.setText("First Name:");
        FName.setToolTipText("");
        getContentPane().add(FName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        LName.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        LName.setForeground(new java.awt.Color(255, 255, 255));
        LName.setText("Last Name:");
        getContentPane().add(LName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        GmsPlayed.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        GmsPlayed.setForeground(new java.awt.Color(255, 255, 255));
        GmsPlayed.setText("Games Played:");
        getContentPane().add(GmsPlayed, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, -1, -1));

        POsition.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        POsition.setForeground(new java.awt.Color(255, 255, 255));
        POsition.setText("Position:");
        POsition.setToolTipText("");
        getContentPane().add(POsition, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        fname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        fname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameActionPerformed(evt);
            }
        });
        fname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fnameKeyTyped(evt);
            }
        });
        getContentPane().add(fname, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 150, 30));

        lname.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lnameKeyTyped(evt);
            }
        });
        getContentPane().add(lname, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 150, 30));

        gamesPlayed.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        gamesPlayed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                gamesPlayedKeyTyped(evt);
            }
        });
        getContentPane().add(gamesPlayed, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, 150, 30));

        Rebounds.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Rebounds.setForeground(new java.awt.Color(255, 255, 255));
        Rebounds.setText("Rebounds:");
        getContentPane().add(Rebounds, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, -1, -1));

        Assists.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Assists.setForeground(new java.awt.Color(255, 255, 255));
        Assists.setText("Assists:");
        getContentPane().add(Assists, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 240, -1, -1));

        Number.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Number.setForeground(new java.awt.Color(255, 255, 255));
        Number.setText("Number:");
        getContentPane().add(Number, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));

        Points.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Points.setForeground(new java.awt.Color(255, 255, 255));
        Points.setText("Points:");
        getContentPane().add(Points, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 190, 80, 30));

        rebounds.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        rebounds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                reboundsKeyTyped(evt);
            }
        });
        getContentPane().add(rebounds, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 290, 150, 30));

        assists.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        assists.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                assistsKeyTyped(evt);
            }
        });
        getContentPane().add(assists, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 240, 150, 30));

        number.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        number.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numberKeyTyped(evt);
            }
        });
        getContentPane().add(number, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, 150, 30));

        points.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        points.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pointsKeyTyped(evt);
            }
        });
        getContentPane().add(points, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, 150, 30));

        createPlayer.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        createPlayer.setText("Create Player");
        createPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPlayerActionPerformed(evt);
            }
        });
        getContentPane().add(createPlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 340, 120, 30));

        Cancel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });
        getContentPane().add(Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 340, 120, 30));

        pos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A", "Forward", "Guard" }));
        getContentPane().add(pos, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 150, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/basketball/1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setMaximumSize(new java.awt.Dimension(700, 400));
        jLabel1.setMinimumSize(new java.awt.Dimension(700, 400));
        jLabel1.setPreferredSize(new java.awt.Dimension(770, 440));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        setSize(new java.awt.Dimension(716, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void createPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPlayerActionPerformed
        String name1 = fname.getText();
        String name2 = lname.getText();
        int gp = 0;
        int reb = 0;
        int as = 0;
        int n = 0;
        int p = 0;
        if(!gamesPlayed.getText().equals("")){
            if(!rebounds.getText().equals("")){
                if(!assists.getText().equals("")){
                    if(!number.getText().equals("")){
                        if(!points.getText().equals("")){
                            gp = Integer.parseInt(gamesPlayed.getText());
                            reb = Integer.parseInt(rebounds.getText());
                            as = Integer.parseInt(assists.getText());
                            n = Integer.parseInt(number.getText());
                            p = Integer.parseInt(points.getText());
                        }
                    }
                }
            }
        }
        String position = (String) pos.getSelectedItem();
        boolean player = false;
        if(fname.getText().equals("")||lname.getText().equals("")||gamesPlayed.getText().equals("")||rebounds.getText().equals("")||assists.getText().equals("")|| number.getText().equals("")|| points.getText().equals("")|| position.equals("N/A")){
            JOptionPane.showMessageDialog(null, "Please fill in all required fields.");
            player = false;
        }else{
            player = true;
        }
        if(player == true){
            /*
            list.add(new Player(fname.getText(), lname.getText(), gp, n, reb, as, position, p ));
            JOptionPane.showMessageDialog(null, "The player " + fname.getText() + " " + lname.getText()+ " was added to the database.");  
            updateFile(list);*/
            boolean found = false; //control variable for the next empty slot
            int index = 0; //has to be 0 to 29
                while(found == false){
                    if(index >= 0 && index <= 29 ){
                        if(list[index] == null){
                            list[index] = new Player(fname.getText(), lname.getText(), gp, n, reb, as, position, p );
                            JOptionPane.showMessageDialog(null, "A new Player was successfully added.");
                            found = true;
                        }
                        index++;
                    }
                } 
            
            
            updateFile(list);
            
            
            this.setVisible(false);
            StartFrame st = new StartFrame();
            st.setVisible(true);
        }
        
    }//GEN-LAST:event_createPlayerActionPerformed
    
    private boolean isEmpty(Player[] ab){
        boolean isit = true;
        for(int i = 0; i< ab.length; i++ ){//if there is even a single non-null, the list isn't empty
            if(ab[i] != null){
                isit = false;
            }
        }
        return isit;
    }
    private void updateFile(Player[] lt){
        try{
                FileOutputStream fos= new FileOutputStream("Players");
                ObjectOutputStream oos= new ObjectOutputStream(fos);
                oos.writeObject(lt); //this is a way to store the arraylist in a file
                oos.close();
                fos.close();
            }catch(IOException ioe){
                ioe.printStackTrace();
            }
    }
    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        StartFrame sf = new StartFrame();
        this.setVisible(false);
        sf.setVisible(true);
    }//GEN-LAST:event_CancelActionPerformed

    private void fnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fnameKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(!(Character.isAlphabetic(c) ||  (c==KeyEvent.VK_BACK_SPACE)||  c==KeyEvent.VK_DELETE ))
            evt.consume();
    }//GEN-LAST:event_fnameKeyTyped

    private void lnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lnameKeyTyped
        // TODO add your handling code here:
        char c=evt.getKeyChar();
        if(!(Character.isAlphabetic(c) ||  (c==KeyEvent.VK_BACK_SPACE)||  c==KeyEvent.VK_DELETE ))
            evt.consume();
    }//GEN-LAST:event_lnameKeyTyped

    private void gamesPlayedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gamesPlayedKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE){
            evt.consume();
        }
    }//GEN-LAST:event_gamesPlayedKeyTyped

    private void reboundsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reboundsKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE){
            evt.consume();
        }
    }//GEN-LAST:event_reboundsKeyTyped

    private void assistsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_assistsKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE){
            evt.consume();
        }
    }//GEN-LAST:event_assistsKeyTyped

    private void numberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE){
            evt.consume();
        }
    }//GEN-LAST:event_numberKeyTyped

    private void pointsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pointsKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE){
            evt.consume();
        }
    }//GEN-LAST:event_pointsKeyTyped

    private void fnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newPlayer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Assists;
    private javax.swing.JLabel BBallTeam;
    private javax.swing.JButton Cancel;
    private javax.swing.JLabel FName;
    private javax.swing.JLabel GRU;
    private javax.swing.JLabel GmsPlayed;
    private javax.swing.JLabel LName;
    private javax.swing.JLabel Number;
    private javax.swing.JLabel POsition;
    private javax.swing.JLabel Points;
    private javax.swing.JLabel Rebounds;
    private javax.swing.JTextField assists;
    private javax.swing.JButton createPlayer;
    private javax.swing.JTextField fname;
    private javax.swing.JTextField gamesPlayed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField lname;
    private javax.swing.JTextField number;
    private javax.swing.JTextField points;
    private javax.swing.JComboBox<String> pos;
    private javax.swing.JTextField rebounds;
    // End of variables declaration//GEN-END:variables
}
