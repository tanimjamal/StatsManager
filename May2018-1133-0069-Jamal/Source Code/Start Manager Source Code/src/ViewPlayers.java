/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Tanim
 */
import java.util.*;
import java.io.*;
import java.text.DecimalFormat;
import javax.swing.*;
public class ViewPlayers extends javax.swing.JFrame {

    /**
     * Creates new form ViewPlayers
     */
    Player[] playerList = new Player[30];
    Player [] seeing; //the list that is printed on the screen
    
    ///public ViewPlayers(){
       // initComponents();
    //}

    public ViewPlayers(Player[] fat) {
        playerList = fat;
        seeing = fat;
        initComponents();
        seeList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        show = new javax.swing.JList<>();
        GRU = new javax.swing.JLabel();
        BBallTeam = new javax.swing.JLabel();
        Sort = new javax.swing.JButton();
        sortCombo = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        Cancel = new javax.swing.JButton();
        EditPLayer = new javax.swing.JButton();
        ShowStats = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(714, 93, -1, -1));

        show.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jScrollPane2.setViewportView(show);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 370, 210));

        GRU.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        GRU.setForeground(new java.awt.Color(255, 255, 255));
        GRU.setText("Grand Ridge University  ");
        getContentPane().add(GRU, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        BBallTeam.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        BBallTeam.setForeground(new java.awt.Color(255, 255, 255));
        BBallTeam.setText("Basketball Team");
        getContentPane().add(BBallTeam, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, -1, -1));

        Sort.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Sort.setText("Sort");
        Sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortActionPerformed(evt);
            }
        });
        getContentPane().add(Sort, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 80, 30));

        sortCombo.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        sortCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "View All", "Jersey Number", "Last Name", "Guards", "Forwards" }));
        getContentPane().add(sortCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 190, 30));

        display.setEditable(false);
        display.setColumns(20);
        display.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        display.setRows(5);
        jScrollPane3.setViewportView(display);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 130, 250, 210));

        Cancel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });
        getContentPane().add(Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 350, 100, 30));

        EditPLayer.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        EditPLayer.setText("Edit Player");
        EditPLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPLayerActionPerformed(evt);
            }
        });
        getContentPane().add(EditPLayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 350, -1, 30));

        ShowStats.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ShowStats.setText("Show Stats");
        ShowStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowStatsActionPerformed(evt);
            }
        });
        getContentPane().add(ShowStats, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 350, 140, 30));

        removeButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 350, 140, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/basketball/1.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 400));

        setSize(new java.awt.Dimension(716, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void seeList(){
        DefaultListModel a = new DefaultListModel();
        
        for(int i = 0; i< seeing.length; i++){
            if(seeing[i] != null){
                a.addElement(seeing[i].fName + " " + seeing[i].lName);
            }
        }
        show.setModel(a);
    }
    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        StartFrame stf = new StartFrame();
        this.setVisible(false);
        stf.setVisible(true);
    }//GEN-LAST:event_CancelActionPerformed

    private void EditPLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPLayerActionPerformed
        // TODO add your handling code here:
        Player pl = null;
        String full = "";
        if(show.getSelectedValue() != null){
            full = show.getSelectedValue();
            Scanner kboard = new Scanner(full);
            String f = kboard.next();
            String l = kboard.next();
            for(int i = 0; i< playerList.length;i++ ){
                if(playerList[i]!=  null){
                    if(playerList[i].fName.equals(f) && playerList[i].lName.equals(l)){
                        pl = playerList[i];
                    }
                }
            }
        }
        if(show.getSelectedValue() != null && pl != null){
            this.setVisible(false);
            updateInfo ui = new updateInfo(playerList, pl);
            ui.setVisible(true);
        }
    }//GEN-LAST:event_EditPLayerActionPerformed

    private void ShowStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowStatsActionPerformed
        // TODO add your handling code here:
        
        String se = "";
        String f = "";
        String l = "";
        if(show.getSelectedValue() != null){
            se = show.getSelectedValue();
        
            Scanner kboard = new Scanner(se);
            f = kboard.next();
            l = kboard.next();
        }
        DecimalFormat df = new DecimalFormat("#.#"); //for decimal format when rounding
        if(!se.equals("")){
            for(int i = 0; i< seeing.length; i++){
                if(seeing[i] != null){
                    if(seeing[i].fName.equals(f) && seeing[i].lName.equals(l)){                                                                                                                                                                         
                        display.setText("Name: "+seeing[i].fName +" " + seeing[i].lName+"\nPosition: " + seeing[i].position+"\nJersey Number: "+ seeing[i].jerseyNumber+"\nTotal Points: "+ seeing[i].points+"    PPG: "+df.format((double)seeing[i].points/seeing[i].totalGames)+"\nAssists: " + seeing[i].assist+"    APG: "+df.format((double)seeing[i].assist/seeing[i].totalGames)+"\nRebounds: "+seeing[i].rebounds+"    RPG: "+df.format((double)seeing[i].rebounds/seeing[i].totalGames)+"\nGames Played: "+ seeing[i].totalGames);
                    }
                }
            }
        }
    }//GEN-LAST:event_ShowStatsActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        String f = "";
        String l = "";
        if(show.getSelectedValue() != null){
            Scanner kboard = new Scanner(show.getSelectedValue());
            f = kboard.next();
            l = kboard.next();
            
            for(int i = 0; i< playerList.length; i++){
                if(playerList[i]!= null){
                    if(playerList[i].fName.equals(f) && playerList[i].lName.equals(l)){
                        playerList[i]= null;
                        seeing = playerList;
                        seeList();
                        //update the file
                        try{
                            FileOutputStream fos= new FileOutputStream("Players");
                            ObjectOutputStream oos= new ObjectOutputStream(fos);
                            oos.writeObject(playerList); //this is a way to store the arraylist in a file
                            oos.close();
                            fos.close();
                        }catch(IOException ioe){
                            ioe.printStackTrace();
                        }
                    } 
                }        
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void SortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortActionPerformed
        // TODO add your handling code here:
        String select = (String) sortCombo.getSelectedItem();
        if(select != null){
            if(select.equalsIgnoreCase("Jersey Number")){
                seeing = readFile();
                for(int i = 0; i < seeing.length-1; i++){
                    int index = i; //the first index is the smallest number
                    for(int j = i+1; j< seeing.length; j++){
                        try{//fof all the null pointers, there's exceptions
                            if(seeing[j].jerseyNumber < seeing[index].jerseyNumber)
                               index = j; //the neew index is where the lowest number is
                        }catch(NullPointerException n){}
                    }//loop through the entire list to find the lowest number then make the swap
                    Player high =seeing[i]; 
                    seeing [i] = seeing[index];
                    seeing[index] = high;
                }
                seeList();
            }else if(select.equalsIgnoreCase("View All")){
                seeing = readFile();
                seeList();
            }else if(select.equalsIgnoreCase("Last Name")){
                seeing = readFile();
                for(int i = 0; i < seeing.length-1; i++){
                    int index = i; //the first index is the smallest number
                    for(int j = i+1; j< seeing.length; j++){
                        try{//fof all the null pointers, there's exceptions
                            if(seeing[j].lName.toLowerCase().compareTo(seeing[index].lName.toLowerCase()) < 0)
                               index = j; //the neew index is where the lowest number is
                            
                        }catch(NullPointerException n){}
                    }//loop through the entire list to find the lowest number then make the swap
                    Player high =seeing[i]; 
                    seeing [i] = seeing[index];
                    seeing[index] = high;
                }
                seeList();    
            }else if(select.equalsIgnoreCase("Guards")){
                seeing = readFile();
                for(int i = 0; i< seeing.length; i++){
                    if(seeing[i]!= null){
                        if(!seeing[i].position.equalsIgnoreCase("Guard")){
                            seeing[i] = null;
                        }
                    }
                }
                seeList();
            }else if(select.equalsIgnoreCase("Forwards")){
                seeing = readFile();
                for(int i = 0; i< seeing.length; i++){
                    if(seeing[i]!= null){
                        if(!seeing[i].position.equalsIgnoreCase("Forward")){
                            seeing[i] = null;
                        }
                    }
                }
                seeList();
            }
        }
    }//GEN-LAST:event_SortActionPerformed
    private Player [] readFile(){
        Player [] temp = null;
        try
            {
                FileInputStream fis = new FileInputStream("Players");
                ObjectInputStream ois = new ObjectInputStream(fis);
                temp = (Player[]) ois.readObject();
                ois.close();
                fis.close();
            }catch(IOException ioe){
                ioe.printStackTrace();
                //return;
            }catch(ClassNotFoundException c){
                System.out.println("Class not found");
                c.printStackTrace();
                //return;
            }
        return temp;
    }
    private Player[] clear(Player[] temp){
        
        for(int i = 0; i< temp.length; i++){
            temp[i] = null;
        }
        return temp;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPlayers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPlayers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPlayers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPlayers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ViewPlayers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BBallTeam;
    private javax.swing.JButton Cancel;
    private javax.swing.JButton EditPLayer;
    private javax.swing.JLabel GRU;
    private javax.swing.JButton ShowStats;
    private javax.swing.JButton Sort;
    private javax.swing.JTextArea display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton removeButton;
    private javax.swing.JList<String> show;
    private javax.swing.JComboBox<String> sortCombo;
    // End of variables declaration//GEN-END:variables
}
